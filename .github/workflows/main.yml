name: Gradle Build with SBOM & License Reports

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (uses wrapper + caching)
        uses: gradle/actions/setup-gradle@v3

      - name: Show Gradle and Java versions
        run: |
          ./gradlew -v
          java -version

      - name: Dependency Updates and License Reports
        run: |
          # If dependency locking is enabled in your project, disable it for this check
          # export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.dependency.locking=false"

          ./gradlew dependencyUpdates --refresh-dependencies --info -Drevision=release
          ./gradlew generateLicenseReport

      - name: Format outdated dependencies (optional)
        run: |
          if [ -f "./get-details-1.sh" ]; then
            bash ./get-details-1.sh || true
          else
            echo "Formatter script not present; skipping."
          fi

      - name: List generated reports
        run: |
          echo "=== Dependency Updates ==="
          ls -l dependency-updates || echo "No dependency-updates dir"
          echo "=== License Reports ==="
          ls -l build/reports/dependency-license || echo "No license reports"

      - name: Upload Outdated Dependencies (raw)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-raw
          path: dependency-updates/report.txt
          if-no-files-found: warn

      - name: Upload Outdated Dependencies (formatted)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-formatted
          path: outdated_dependencies_report.txt
          if-no-files-found: ignore

      - name: Upload License Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: build/reports/dependency-license/**
          if-no-files-found: warn

      - name: Upload SBOM
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-result
          path: sbom-result.txt
          if-no-files-found: warn

      - name: Upload Trivy Vulnerabilities
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerabilities
          path: trivy-vulnerabilities.txt
          if-no-files-found: warn
            
# name: Gradle Build with SBOM & License Reports

# on:
#   push:
#     branches: [ "master" ]

# jobs:
#   build:
#     runs-on: ubuntu-22.04

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: temurin
#           java-version: 17

#       - name: Set up Gradle (uses wrapper + caching)
#         uses: gradle/actions/setup-gradle@v3

#       - name: Show Gradle and Java versions
#         run: |
#           ./gradlew -v
#           java -version

#       - name: Dependency Updates and License Reports
#         run: |
#           # If dependency locking is enabled in your project, disable it for this check
#           # export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.dependency.locking=false"
#           ./gradlew dependencyUpdates --refresh-dependencies --info -Drevision=release
#           ./gradlew generateLicenseReport

#       - name: Format outdated dependencies (optional)
#         run: |
#           if [ -f "./get-details-1.sh" ]; then
#             bash ./get-details-1.sh || true
#           else
#             echo "Formatter script not present; skipping."
#           fi

#       - name: Generate SBOM (txt)
#         uses: anchore/sbom-action@v0
#         with:
#           path: .
#           format: table
#           output-file: sbom-result.txt

#       - name: Run Trivy filesystem scan (txt)
#         uses: aquasecurity/trivy-action@0.28.0
#         with:
#           scan-type: fs
#           scan-ref: .
#           format: table
#           output: trivy-vulnerabilities.txt
#           ignore-unfixed: true
#           severity: HIGH,CRITICAL

#       - name: List generated reports
#         run: |
#           echo "=== Dependency Updates ==="
#           ls -l dependency-updates || echo "No dependency-updates dir"
#           echo "=== License Reports ==="
#           ls -l build/reports/dependency-license || echo "No license reports"
#           echo "=== SBOM ==="
#           ls -l sbom-result.txt || echo "No SBOM"
#           echo "=== Trivy ==="
#           ls -l trivy-vulnerabilities.txt || echo "No Trivy report"

#       - name: Upload Outdated Dependencies (raw)
#         if: success() || failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: outdated-dependencies-raw
#           path: dependency-updates/report.txt
#           if-no-files-found: warn

#       - name: Upload Outdated Dependencies (formatted)
#         if: success() || failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: outdated-dependencies-formatted
#           path: outdated_dependencies_report.txt
#           if-no-files-found: ignore

#       - name: Upload License Reports
#         if: success() || failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: license-reports
#           path: build/reports/dependency-license/**
#           if-no-files-found: warn

#       - name: Upload SBOM
#         if: success() || failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: sbom-result
#           path: sbom-result.txt
#           if-no-files-found: warn

#       - name: Upload Trivy Vulnerabilities
#         if: success() || failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: trivy-vulnerabilities
#           path: trivy-vulnerabilities.txt
#           if-no-files-found: warn
